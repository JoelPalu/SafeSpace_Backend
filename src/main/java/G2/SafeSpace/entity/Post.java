package G2.SafeSpace.entity;

import jakarta.persistence.*;

import java.util.HashSet;
import java.util.Set;

/**
 * The Post entity represents a post in the system.
 * It contains the post's content, picture, date, associated users, liked users, and comments.
 * This entity is mapped to the "posts" table in the database.
 */
@Entity
@Table(name = "posts")
public class Post {

    /**
     * The unique identifier for the post.
     * The value is automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int postID;

    /**
     * The content of the post.
     * This field holds the text content of the post.
     */
    @Column
    private String Post_content;

    /**
     * The ID of the post's picture (if any).
     * This field holds the identifier for the post's image.
     */
    @Column
    private String Post_pictureID;

    /**
     * The date the post was created.
     * This field is read-only and managed by the database.
     */
    @Column(insertable = false, updatable = false)
    private String Post_date;

    /**
     * The set of users associated with this post.
     * This represents the users who have created or are linked to this post.
     */
    @ManyToMany(mappedBy = "posts")
    private Set<User> users = new HashSet<>();

    /**
     * The set of users who liked this post.
     * This represents the users who have liked this post.
     */
    @ManyToMany(mappedBy = "likedPosts")
    private Set<User> likedUsers = new HashSet<>();

    /**
     * The set of comments associated with this post.
     * This represents the comments made on this post.
     */
    @ManyToMany
    @JoinTable(
            name = "postComments",
            joinColumns = @JoinColumn(name = "post_ID"),
            inverseJoinColumns = @JoinColumn(name = "comment_ID")
    )
    private Set<Comment> comments = new HashSet<>();

    /**
     * Default constructor for the Post class.
     * This constructor is used to create an empty Post object.
     */
    public Post() {}

    /**
     * Retrieves the unique identifier of the post.
     *
     * @return the post's ID
     */
    public int getPostID() {
        return this.postID;
    }

    /**
     * Retrieves the content of the post.
     *
     * @return the content of the post
     */
    public String getPost_content() {
        return this.Post_content;
    }

    /**
     * Retrieves the picture ID of the post.
     *
     * @return the picture ID of the post
     */
    public String getPost_pictureID() {
        return this.Post_pictureID;
    }

    /**
     * Retrieves the date of the post's creation.
     *
     * @return the creation date of the post
     */
    public String getPost_date() {
        return this.Post_date;
    }

    /**
     * Sets the content of the post.
     *
     * @param post_content the content to set for the post
     */
    public void setPost_content(String post_content) {
        this.Post_content = post_content;
    }

    /**
     * Sets the picture ID for the post.
     *
     * @param post_pictureID the picture ID to set for the post
     */
    public void setPost_pictureID(String post_pictureID) {
        this.Post_pictureID = post_pictureID;
    }

    /**
     * Retrieves the set of users associated with this post.
     *
     * @return the set of users associated with this post
     */
    public Set<User> getUsers() {
        return this.users;
    }

    /**
     * Adds a user to the set of users associated with this post.
     *
     * @param user the user to add
     */
    public void addUser(User user) {
        if (user != null) {
            this.users.add(user);
            user.getPosts().add(this);
        }
    }

    /**
     * Removes a user from the set of users associated with this post.
     *
     * @param user the user to remove
     */
    public void removeUser(User user) {
        if (user != null) {
            this.users.remove(user);
            user.getPosts().remove(this);
        }
    }

    /**
     * Retrieves the set of users who liked this post.
     *
     * @return the set of users who liked this post
     */
    public Set<User> getLikedUsers() {
        return this.likedUsers;
    }

    /**
     * Adds a user to the set of users who liked this post.
     *
     * @param user the user to add
     */
    public void addLikedUser(User user) {
        if (user != null) {
            this.likedUsers.add(user);
            user.getLikedPosts().add(this);
        }
    }

    /**
     * Removes a user from the set of users who liked this post.
     *
     * @param user the user to remove
     */
    public void removeLikedUser(User user) {
        if (user != null) {
            this.likedUsers.remove(user);
            user.getLikedPosts().remove(this);
        }
    }

    /**
     * Retrieves the set of comments associated with this post.
     *
     * @return the set of comments on this post
     */
    public Set<Comment> getComments() {
        return this.comments;
    }

    /**
     * Adds a comment to the set of comments associated with this post.
     *
     * @param comment the comment to add
     */
    public void addComment(Comment comment) {
        if (comment != null) {
            this.comments.add(comment);
        }
    }

    /**
     * Returns a string representation of the post, including the post's ID, content, and picture ID.
     *
     * @return a string containing the post details
     */
    @Override
    public String toString() {
        return "POST ENTITY: " +
                "PostID: " + postID +
                ", PostContent: " + Post_content +
                ", PostPictureID: " + Post_pictureID;
    }
}
