package G2.SafeSpace.entity;

import jakarta.persistence.*;

/**
 * The Comment entity represents a comment made by a user on a post.
 * It includes the content of the comment, the user who made the comment,
 * and a unique identifier for the comment.
 * <p>
 * This entity is mapped to the "comments" table in the database.
 */
@Entity
@Table(name = "comments")
public class Comment {

    /**
     * The unique identifier for this comment.
     * The value is automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int commentID;

    /**
     * The user who made the comment.
     * This establishes a many-to-one relationship between Comment and User.
     */
    @ManyToOne
    @JoinColumn(name = "userID", foreignKey = @ForeignKey(name = "comment_user_id"))
    private User user;

    /**
     * The content of the comment. This field holds the actual text of the comment.
     */
    @Column
    private String commentContent;

    /**
     * Default constructor for the Comment class.
     */
    public Comment() {}

    /**
     * Retrieves the unique identifier of the comment.
     *
     * @return the comment's ID
     */
    public int getCommentID() {
        return this.commentID;
    }

    /**
     * Retrieves the user who made the comment.
     *
     * @return the user who made the comment
     */
    public User getUser() {
        return this.user;
    }

    /**
     * Retrieves the content of the comment.
     *
     * @return the content of the comment
     */
    public String getCommentContent() {
        return this.commentContent;
    }

    /**
     * Sets the user who made the comment.
     *
     * @param user the user to associate with the comment
     */
    public void setUser(User user) {
        this.user = user;
    }

    /**
     * Sets the content of the comment.
     *
     * @param commentContent the content to set for the comment
     */
    public void setCommentContent(String commentContent) {
        this.commentContent = commentContent;
    }

    /**
     * Returns a string representation of the comment, including the comment's ID,
     * the user who made it, and the content of the comment.
     *
     * @return a string containing the comment details
     */
    public String getCommentDetails() {
        return "Comment{commentID=" + commentID + ", user=" + user + ", commentContent=" + commentContent + "}";
    }
}
